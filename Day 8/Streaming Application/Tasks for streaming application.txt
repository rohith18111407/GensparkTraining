Objective:
Create a stored procedure that inserts rental data on the primary server, and verify that changes replicate to the standby server. Add a logging mechanism to track each operation.

Tasks to Complete:
Set up streaming replication (if not already done):

Primary on port 5432

Standby on port 5433

Create a table on the primary:


CREATE TABLE rental_log (
    log_id SERIAL PRIMARY KEY,
    rental_time TIMESTAMP,
    customer_id INT,
    film_id INT,
    amount NUMERIC,
    logged_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Ensure this table is replicated.

Write a stored procedure to:

Insert a new rental log entry

Accept customer_id, film_id, amount as inputs

Wrap logic in a transaction with error handling (BEGIN...EXCEPTION...END)


CREATE OR REPLACE PROCEDURE sp_add_rental_log(
    p_customer_id INT,
    p_film_id INT,
    p_amount NUMERIC
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO rental_log (rental_time, customer_id, film_id, amount)
    VALUES (CURRENT_TIMESTAMP, p_customer_id, p_film_id, p_amount);
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error occurred: %', SQLERRM;
END;
$$;
Call the procedure on the primary:


CALL sp_add_rental_log(1, 100, 4.99);
On the standby (port 5433):

Confirm that the new record appears in rental_log

Run:SELECT * FROM rental_log ORDER BY log_id DESC LIMIT 1;

Add a trigger to log any UPDATE to rental_log

----------------------------------------------------------------------

initdb -D "C:/primary" 
initdb -D "C:/secondary" 

pg_ctl -D C:\primary -o "-p 5433" -l c:\primary\logfile start 


>psql -p 5433 -d postgres -c "CREATE ROLE replicator with REPLICATION LOGIN PASSWORD 'repl_pass';"

pg_basebackup -D c:\secondary -Fp -Xs -P -R -h 127.0.0.1 -U replicator -p 5433 

pg_ctl -D C:\secondary -o "-p 5435" -l c:\secondary\logfile start 

psql -p 5433 -d postgres 

(In another cmd)

psql -p 5435 -d postgres

--------------------------------------
5433 - 
select * from pg_stat_replication;
5435
select pg_is_in_recovery();


-----------------------------------------------------------------------------


